generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Auth (NextAuth v4) ----------
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ---------- Brand & Commerce ----------
model Brand {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  logoUrl       String?
  colorsJson    Json?
  typography    Json?
  aboutMd       String?
  chatbotConfig Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String
  priceCents  Int
  currency    String   @default("usd")
  images      String[]
  active      Boolean  @default(true)
  stock       Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id            String   @id @default(cuid())
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
  email         String
  lineItems     Json
  subtotalCents Int
  shippingCents Int      @default(0)
  totalCents    Int
  currency      String   @default("usd")
  stripeSession String   @unique
  status        String   @default("paid")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
